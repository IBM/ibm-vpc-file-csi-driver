// Code generated by counterfeiter. DO NOT EDIT.
package metadata

import (
	"sync"
)

type FakeNodeMetadata struct {
	GetRegionStub        func() string
	getRegionMutex       sync.RWMutex
	getRegionArgsForCall []struct {
	}
	getRegionReturns struct {
		result1 string
	}
	getRegionReturnsOnCall map[int]struct {
		result1 string
	}
	GetWorkerIDStub        func() string
	getWorkerIDMutex       sync.RWMutex
	getWorkerIDArgsForCall []struct {
	}
	getWorkerIDReturns struct {
		result1 string
	}
	getWorkerIDReturnsOnCall map[int]struct {
		result1 string
	}
	GetZoneStub        func() string
	getZoneMutex       sync.RWMutex
	getZoneArgsForCall []struct {
	}
	getZoneReturns struct {
		result1 string
	}
	getZoneReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeMetadata) GetRegion() string {
	fake.getRegionMutex.Lock()
	ret, specificReturn := fake.getRegionReturnsOnCall[len(fake.getRegionArgsForCall)]
	fake.getRegionArgsForCall = append(fake.getRegionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetRegion", []interface{}{})
	fake.getRegionMutex.Unlock()
	if fake.GetRegionStub != nil {
		return fake.GetRegionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getRegionReturns
	return fakeReturns.result1
}

func (fake *FakeNodeMetadata) GetRegionCallCount() int {
	fake.getRegionMutex.RLock()
	defer fake.getRegionMutex.RUnlock()
	return len(fake.getRegionArgsForCall)
}

func (fake *FakeNodeMetadata) GetRegionCalls(stub func() string) {
	fake.getRegionMutex.Lock()
	defer fake.getRegionMutex.Unlock()
	fake.GetRegionStub = stub
}

func (fake *FakeNodeMetadata) GetRegionReturns(result1 string) {
	fake.getRegionMutex.Lock()
	defer fake.getRegionMutex.Unlock()
	fake.GetRegionStub = nil
	fake.getRegionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) GetRegionReturnsOnCall(i int, result1 string) {
	fake.getRegionMutex.Lock()
	defer fake.getRegionMutex.Unlock()
	fake.GetRegionStub = nil
	if fake.getRegionReturnsOnCall == nil {
		fake.getRegionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRegionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) GetWorkerID() string {
	fake.getWorkerIDMutex.Lock()
	ret, specificReturn := fake.getWorkerIDReturnsOnCall[len(fake.getWorkerIDArgsForCall)]
	fake.getWorkerIDArgsForCall = append(fake.getWorkerIDArgsForCall, struct {
	}{})
	fake.recordInvocation("GetWorkerID", []interface{}{})
	fake.getWorkerIDMutex.Unlock()
	if fake.GetWorkerIDStub != nil {
		return fake.GetWorkerIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getWorkerIDReturns
	return fakeReturns.result1
}

func (fake *FakeNodeMetadata) GetWorkerIDCallCount() int {
	fake.getWorkerIDMutex.RLock()
	defer fake.getWorkerIDMutex.RUnlock()
	return len(fake.getWorkerIDArgsForCall)
}

func (fake *FakeNodeMetadata) GetWorkerIDCalls(stub func() string) {
	fake.getWorkerIDMutex.Lock()
	defer fake.getWorkerIDMutex.Unlock()
	fake.GetWorkerIDStub = stub
}

func (fake *FakeNodeMetadata) GetWorkerIDReturns(result1 string) {
	fake.getWorkerIDMutex.Lock()
	defer fake.getWorkerIDMutex.Unlock()
	fake.GetWorkerIDStub = nil
	fake.getWorkerIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) GetWorkerIDReturnsOnCall(i int, result1 string) {
	fake.getWorkerIDMutex.Lock()
	defer fake.getWorkerIDMutex.Unlock()
	fake.GetWorkerIDStub = nil
	if fake.getWorkerIDReturnsOnCall == nil {
		fake.getWorkerIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getWorkerIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) GetZone() string {
	fake.getZoneMutex.Lock()
	ret, specificReturn := fake.getZoneReturnsOnCall[len(fake.getZoneArgsForCall)]
	fake.getZoneArgsForCall = append(fake.getZoneArgsForCall, struct {
	}{})
	fake.recordInvocation("GetZone", []interface{}{})
	fake.getZoneMutex.Unlock()
	if fake.GetZoneStub != nil {
		return fake.GetZoneStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getZoneReturns
	return fakeReturns.result1
}

func (fake *FakeNodeMetadata) GetZoneCallCount() int {
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	return len(fake.getZoneArgsForCall)
}

func (fake *FakeNodeMetadata) GetZoneCalls(stub func() string) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = stub
}

func (fake *FakeNodeMetadata) GetZoneReturns(result1 string) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = nil
	fake.getZoneReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) GetZoneReturnsOnCall(i int, result1 string) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = nil
	if fake.getZoneReturnsOnCall == nil {
		fake.getZoneReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getZoneReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeNodeMetadata) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRegionMutex.RLock()
	defer fake.getRegionMutex.RUnlock()
	fake.getWorkerIDMutex.RLock()
	defer fake.getWorkerIDMutex.RUnlock()
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeMetadata) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ NodeMetadata = new(FakeNodeMetadata)
